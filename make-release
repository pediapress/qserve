#! /usr/bin/env python
from __future__ import print_function

import subprocess
import sys

import commands


def system(cmd):
    print("====> Running", cmd)
    popen = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    nl = True
    while 1:
        char = popen.stdout.read(1)
        if not char:
            break
        if nl:
            sys.stdout.write("    ")
        sys.stdout.write(char)
        sys.stdout.flush()
        nl = char == "\n"

    st = popen.wait()
    if st != 0:
        sys.exit("Error: command %r failed" % cmd)
    print()


def main():
    st, tags = commands.getstatusoutput("git tag")
    assert st == 0, "failed to get tags"
    tags = set(tags.split())
    import setup

    version = setup.get_version()

    assert version not in tags, "already have tagged %s" % version

    st, descr = commands.getstatusoutput("git describe --all --dirty")
    assert st == 0
    dirty = "-dirty" in descr
    if dirty:
        print("working directory is dirty")

    # st, tag = commands.getstatusoutput("git describe --tags --exact-match --dirty")
    # tag = tag.strip()
    # assert st == 0, "revision not tagged"
    # import setup
    # assert setup.get_version() == tag, "version mismatch: %s != %s" % (setup.get_version(), tag)

    system("tox")
    system("%s setup.py -q sdist" % sys.executable)
    if not dirty:
        system("%s setup.py register" % sys.executable)
        system("%s setup.py -q sdist upload" % sys.executable)
        system("git tag %s" % version)
    else:
        print("WARNING: build was dirty. did not upload or tag a release")
        sys.exit(1)


if __name__ == "__main__":
    main()
